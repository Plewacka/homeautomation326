/**
 * This sample demonstrates a simple skill built with the Amazon Alexa Skills Kit.
 * For additional samples, visit the Alexa Skills Kit developer documentation at
 * https://developer.amazon.com/appsandservices/solutions/alexa/alexa-skills-kit/getting-started-guide
 */

var http = require('http');

// Route the incoming request based on type (LaunchRequest, IntentRequest,
// etc.) The JSON body of the request is provided in the event parameter.
exports.handler = function (event, context) {
    try {
        console.log("event.session.application.applicationId=" + event.session.application.applicationId);

        /**
         * Uncomment this if statement and populate with your skill's application ID to
         * prevent someone else from configuring a skill that sends requests to this function.
         */
        
        if (event.session.application.applicationId !== "amzn1.ask.skill.60daa250-cce8-4a82-8d07-3fa70a49c445") {
             context.fail("Invalid Application ID");
         }
        

        if (event.session.new) {
            onSessionStarted({requestId: event.request.requestId}, event.session);
        }

        if (event.request.type === "LaunchRequest") {
            onLaunch(event.request,
                     event.session,
                     function callback(sessionAttributes, speechletResponse) {
                        context.succeed(buildResponse(sessionAttributes, speechletResponse));
                     });
        }  else if (event.request.type === "IntentRequest") {
            onIntent(event.request,
                     event.session,
                     function callback(sessionAttributes, speechletResponse) {
                         context.succeed(buildResponse(sessionAttributes, speechletResponse));
                     });
        } else if (event.request.type === "SessionEndedRequest") {
            onSessionEnded(event.request, event.session);
            context.succeed();
        }
    } catch (e) {
        context.fail("Exception: " + e);
    }
};

/**
 * Called when the session starts.
 */
function onSessionStarted(sessionStartedRequest, session) {
    console.log("onSessionStarted requestId=" + sessionStartedRequest.requestId + ", sessionId=" + session.sessionId);
}

/**
 * Called when the user launches the skill without specifying what they want.
 */
function onLaunch(launchRequest, session, callback) 
{
    console.log("onLaunch requestId=" + launchRequest.requestId
                + ", sessionId=" + session.sessionId);

    // Dispatch to your skill's launch.
    getWelcomeResponse(callback);
}

/**
 * Called when the user specifies an intent for this skill.
 */
function onIntent(intentRequest, session, callback) {
    console.log("onIntent requestId=" + intentRequest.requestId + ", sessionId=" + session.sessionId);

    var intent = intentRequest.intent,
	intentName = intentRequest.intent.name;

    // Dispatch to your skill's intent handlers
    DoIntent(intent, session, callback);
}

/**
 * Called when the user ends the session.
 * Is not called when the skill returns shouldEndSession=true.
 */
function onSessionEnded(sessionEndedRequest, session) {
    console.log("onSessionEnded requestId=" + sessionEndedRequest.requestId + ", sessionId=" + session.sessionId);
    // Add cleanup logic here
}

// --------------- Functions that control the skill's behavior -----------------------

function DoIntent(intent, session, callback)
{
    var sessionAttributes = "{}";
    var cardTitle = intent.name;
    var shouldEndSession = true;
	var speechOutput = "";
    var repromptText = "Please pass parameters for the " + intent.name + " intent";
	
    var oCommand = intent.slots.command;
    var sText = "";
    var sServerresponse = "";
	
    if (oCommand) 
	{
        //grab command value
        sText = oCommand.value;
    }
	SendRequest(sText,sessionAttributes,cardTitle,repromptText,shouldEndSession,session,callback,true);
}

function SendRequest(sText,sessionAttributes,cardTitle,repromptText,shouldEndSession,session,callback,bRecurse)
{
    // user will configure ip address and GUID
    var sIPAddress = "192.168.1.103";
    var sGUID = "B751501F-9DAD-4EAE-8680-5175EBCF8B83";
    var sUser = "Plewacka";
    var sPassword = "Xbox3606";
    var sPort = "80";
	var sURL = "http://" + sIPAddress + ":" + sPort + "/sys/%7B" + sGUID + "%7D?d??mbNaturalLanguage(" + sText + ")";

    // ensure text is valid for URL
	sText = sText.replace(/[^a-zA-Z0-9_\s]/gi,"");
	sText = sText.replace(/^control home/gi,"");
	sText = sText.replace(/\s+/gi,"_");
	    
	var sPath = '/sys/%7B' + sGUID + '%7D?d??mbNaturalLanguage(' + sText + ')';
		
	// set parameters for sending request
	var options = 
	{
		host: sIPAddress,
		port: sPort,
		path: sPath,
		method: 'POST',
		rejectUnauthorized: false,	//necessary to use self signed SYS certificate from Premise
		auth: sUser + ':' + sPassword
	};

    // Set up the request
    var post_req = http.request(options, function(res) 
	{
        var speechOutput = "";
		res.setEncoding('utf8');
        res.on('data', function (chunk) 
		{
            speechOutput += chunk;
        });
        res.on('end', function ()
		{
			// success, see if we should recurse now
			if (speechOutput.indexOf("<RESEND REQUEST LATER>") > -1 && bRecurse)
			{
				// in one second ask for new response; allows time for alarm set confirmation packets to be received by home automation system
				setTimeout(function ()
				{
					sText = speechOutput.replace("<RESEND REQUEST LATER>","");
					SendRequest(sText,sessionAttributes,cardTitle,repromptText,shouldEndSession,session,callback,false);	
				}, 1000);
			}
			else
			{
				// no need to curse, set call back
				callback(sessionAttributes,buildSpeechletResponse(cardTitle, speechOutput, repromptText, shouldEndSession));
			}
        });
    });
    post_req.on('error', function (e) 
	{
        console.log(e);
        callback(sessionAttributes,buildSpeechletResponse(cardTitle, speechOutput, repromptText, shouldEndSession));
    });
    post_req.end();

}

function getWelcomeResponse(callback) {
    // If we wanted to initialize the session to have some attributes we could add those here.
    var sessionAttributes = {};
    var cardTitle = "Welcome";
    var speechOutput = "Ask me a question or give me a command";
    // If the user either does not reply to the welcome message or says something that is not
    // understood, they will be prompted again with this text.
    var repromptText = "Say a command like, turn on the living room television, or ask me a question such as when was the mailbox last openned";
    var shouldEndSession = false;

    callback(sessionAttributes,buildSpeechletResponse(cardTitle, speechOutput, repromptText, shouldEndSession));
}

// --------------- Helpers that build all of the responses -----------------------

function buildSpeechletResponse(title, output, repromptText, shouldEndSession) {
    return {
        outputSpeech: {
            type: "PlainText",
            text: output
        },
        card: {
            type: "Simple",
            title: "SessionSpeechlet - " + title,
            content: "SessionSpeechlet - " + output
        },
        reprompt: {
            outputSpeech: {
                type: "PlainText",
                text: repromptText
            }
        },
        shouldEndSession: shouldEndSession
    };
}

function buildResponse(sessionAttributes, speechletResponse) {
    return {
        version: "1.0",
        sessionAttributes: sessionAttributes,
        response: speechletResponse
    };
}
